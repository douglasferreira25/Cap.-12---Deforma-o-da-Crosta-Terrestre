{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMyvrnC5Yi664ViWEwnpJmQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/douglasferreira25/deformablematerial/blob/main/Etapa_1_Figuras_2D%20-T3%20-%20Q4-.ipynb%20-%20Altera%C3%A7%C3%A3o%20entrada%20e%20leitura%20dogbone\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "id": "wSIU4kcYmOvK",
        "outputId": "2efce47e-0012-4668-e5ec-1ad5f324dcd8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-c086d6ddc457>\"\u001b[0;36m, line \u001b[0;32m420\u001b[0m\n\u001b[0;31m    Deformation of Earth’s Crust 205\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '’' (U+2019)\n"
          ]
        }
      ],
      "source": [
        "#PENDENCIAS\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n",
        "#CÓDIGO BASE - DOGBONE FEM\n",
        "#EXTRAÍDO DE: https://polymerfem.com/full-finite-element-solver-in-200-lines-of-python/\n",
        "#\n",
        "\n",
        "\n",
        "\n",
        "import sys\n",
        "import numpy as np\n",
        "import math\n",
        "from matplotlib import pyplot as plt\n",
        "## Input file syntax:\n",
        "##    *Node\n",
        "##    1, 0.0, 0.0\n",
        "##    2, 0.0, 1.0\n",
        "##    3, 1.0, 1.0\n",
        "##    4, 1.0, 0.0\n",
        "##    *Element\n",
        "##    1, 1, 2, 3, 4\n",
        "##    *Step\n",
        "##    *Boundary\n",
        "##    1, 1, 2, 0.0          # nodeId, dof1, dof2, value\n",
        "##    2, 1, 1, 0.0\n",
        "##    3, 1, 1, 0.01\n",
        "##    4, 1, 1, 0.01\n",
        "##    4, 2, 2, 0.0\n",
        "def shape(xi):\n",
        "\t\"\"\"Shape functions for a 4-node, isoparametric element\n",
        "\t\tN_i(xi,eta) where i=[1,2,3,4]\n",
        "\t\tInput: 1x2,  Output: 1x4\"\"\"\n",
        "\txi,eta = tuple(xi)\n",
        "\tN = [(1.0-xi)*(1.0-eta), (1.0+xi)*(1.0-eta), (1.0+xi)*(1.0+eta), (1.0-xi)*(1.0+eta)]\n",
        "\treturn 0.25 * np.array(N)\n",
        "def gradshape(xi):\n",
        "\t\"\"\"Gradient of the shape functions for a 4-node, isoparametric element.\n",
        "\t\tdN_i(xi,eta)/dxi and dN_i(xi,eta)/deta\n",
        "\t\tInput: 1x2,  Output: 2x4\"\"\"\n",
        "\txi,eta = tuple(xi)\n",
        "\tdN = [[-(1.0-eta),  (1.0-eta), (1.0+eta), -(1.0+eta)],\n",
        "\t\t  [-(1.0-xi), -(1.0+xi), (1.0+xi),  (1.0-xi)]]\n",
        "\treturn 0.25 * np.array(dN)\n",
        "def local_error(str):\n",
        "\tprint(\"*** ERROR ***\")\n",
        "\tprint(str)\n",
        "\tsys.exit(3)\n",
        "def read_inp_file(inpFileName, nodes, conn, boundary):\n",
        "\tprint('\\n** Read input file')\n",
        "\tinpFile = open(inpFileName, 'r')\n",
        "\tlines = inpFile.readlines()\n",
        "\tinpFile.close()\n",
        "\tstate = 0\n",
        "\tfor line in lines:\n",
        "\t\tline = line.strip()\n",
        "\t\tif len(line) <= 0: continue\n",
        "\t\tif line[0] == '*':\n",
        "\t\t\tstate = 0\n",
        "\t\tif line.lower() == \"*node\":\n",
        "\t\t\tstate = 1\n",
        "\t\t\tcontinue\n",
        "\t\tif line.lower() == \"*element\":\n",
        "\t\t\tstate = 2\n",
        "\t\t\tcontinue\n",
        "\t\tif line.lower() == \"*boundary\":\n",
        "\t\t\tstate = 3\n",
        "\t\t\tcontinue\n",
        "\t\tif state == 0:\n",
        "\t\t\tcontinue\n",
        "\t\tif state == 1:\n",
        "\t\t\t# read nodes\n",
        "\t\t\tvalues = line.split(\",\")\n",
        "\t\t\tif len(values) != 3:\n",
        "\t\t\t\tlocal_error(\"A node definition needs 3 values\")\n",
        "\t\t\tnodeNr = int(values[0]) - 1  # zero indexed\n",
        "\t\t\txx = float(values[1])\n",
        "\t\t\tyy = float(values[2])\n",
        "\t\t\tnodes.append([xx,yy])   # assume the nodes are ordered 1, 2, 3...\n",
        "\t\t\tcontinue\n",
        "\t\tif state == 2:\n",
        "\t\t\t# read elements\n",
        "\t\t\tvalues = line.split(\",\")\n",
        "\t\t\tif len(values) != 5:\n",
        "\t\t\t\tlocal_error(\"An element definition needs 5 values\")\n",
        "\t\t\telemNr = int(values[0])\n",
        "\t\t\tn1 = int(values[1]) - 1  # zero indexed\n",
        "\t\t\tn2 = int(values[2]) - 1\n",
        "\t\t\tn3 = int(values[3]) - 1\n",
        "\t\t\tn4 = int(values[4]) - 1\n",
        "\t\t\t#conn.append([n1, n2, n3, n4]) # assume elements ordered 1, 2, 3\n",
        "\t\t\tconn.append([n1, n4, n3, n2]) # assume elements ordered 1, 2, 3\n",
        "\t\t\tcontinue\n",
        "\t\tif state == 3:\n",
        "\t\t\t# read displacement boundary conditions\n",
        "\t\t\tvalues = line.split(\",\")\n",
        "\t\t\tif len(values) != 4:\n",
        "\t\t\t\tlocal_error(\"A displacement boundary condition needs 4 values\")\n",
        "\t\t\tnodeNr = int(values[0]) - 1  # zero indexed\n",
        "\t\t\tdof1 = int(values[1])\n",
        "\t\t\tdof2 = int(values[2])\n",
        "\t\t\tval = float(values[3])\n",
        "\t\t\tif dof1 == 1:\n",
        "\t\t\t\tboundary.append([nodeNr,1,val])\n",
        "\t\t\tif dof2 == 2:\n",
        "\t\t\t\tboundary.append([nodeNr,2,val])\n",
        "\t\t\tcontinue\n",
        "\n",
        "def main():\n",
        "\t##\n",
        "\t## Main Program\n",
        "\t##\n",
        "\tnodes = []\n",
        "\tconn = []\n",
        "\tboundary = []\n",
        "\tif len(sys.argv) <= 1: local_error('No input file provided.')\n",
        "\tprint('Input file:', sys.argv[1])\n",
        "\tread_inp_file(sys.argv[1], nodes, conn, boundary)\n",
        "\tnodes = np.array(nodes)\n",
        "\tnum_nodes = len(nodes)\n",
        "\tprint('   number of nodes:', len(nodes))\n",
        "\tprint('   number of elements:', len(conn))\n",
        "\tprint('   number of displacement boundary conditions:', len(boundary))\n",
        "\n",
        "\t###############################\n",
        "\t# Plane-strain material tangent (see Bathe p. 194)\n",
        "\t# C is 3x3\n",
        "\tE = 100.0\n",
        "\tv = 0.3\n",
        "\tC = E/(1.0+v)/(1.0-2.0*v) * np.array([[1.0-v, v, 0.0], [v, 1.0-v, 0.0], [0.0, 0.0, 0.5-v]])\n",
        "\t###############################\n",
        "\t# Make stiffness matrix\n",
        "\t# if N is the number of DOF, then K is NxN\n",
        "\tK = np.zeros((2*num_nodes, 2*num_nodes))    # square zero matrix\n",
        "\t# 2x2 Gauss Quadrature (4 Gauss points)\n",
        "\t# q4 is 4x2\n",
        "\tq4 = np.array([[-1,-1],[1,-1],[-1,1],[1,1]]) / math.sqrt(3.0)\n",
        "\tprint('\\n** Assemble stiffness matrix')\n",
        "\t# strain in an element: [strain] = B    U\n",
        "\t#                        3x1     = 3x8  8x1\n",
        "\t#\n",
        "\t# strain11 = B11 U1 + B12 U2 + B13 U3 + B14 U4 + B15 U5 + B16 U6 + B17 U7 + B18 U8\n",
        "\t#          = B11 u1          + B13 u1          + B15 u1          + B17 u1\n",
        "\t#          = dN1/dx u1       + dN2/dx u1       + dN3/dx u1       + dN4/dx u1\n",
        "\tB = np.zeros((3,8))\n",
        "\t# conn[0] is node numbers of the element\n",
        "\tfor c in conn:     # loop through each element\n",
        "\t\t# coordinates of each node in the element\n",
        "\t\t# shape = 4x2\n",
        "\t\t# for example:\n",
        "\t\t#    nodePts = [[0.0,   0.0],\n",
        "\t\t#               [0.033, 0.0],\n",
        "\t\t#               [0.033, 0.066],\n",
        "\t\t#               [0.0,   0.066]]\n",
        "\t\tnodePts = nodes[c,:]\n",
        "\t\tKe = np.zeros((8,8))\t# element stiffness matrix is 8x8\n",
        "\t\tfor q in q4:\t\t\t# for each Gauss point\n",
        "\t\t\t# q is 1x2, N(xi,eta)\n",
        "\t\t\tdN = gradshape(q)       # partial derivative of N wrt (xi,eta): 2x4\n",
        "\t\t\tJ  = np.dot(dN, nodePts).T # J is 2x2\n",
        "\t\t\tdN = np.dot(np.linalg.inv(J), dN)    # partial derivative of N wrt (x,y): 2x4\n",
        "\t\t\t# assemble B matrix  [3x8]\n",
        "\t\t\tB[0,0::2] = dN[0,:]\n",
        "\t\t\tB[1,1::2] = dN[1,:]\n",
        "\t\t\tB[2,0::2] = dN[1,:]\n",
        "\t\t\tB[2,1::2] = dN[0,:]\n",
        "\t\t\t# element stiffness matrix\n",
        "\t\t\tKe += np.dot(np.dot(B.T,C),B) * np.linalg.det(J)\n",
        "\t\t# Scatter operation\n",
        "\t\tfor i,I in enumerate(c):\n",
        "\t\t\tfor j,J in enumerate(c):\n",
        "\t\t\t\tK[2*I,2*J]     += Ke[2*i,2*j]\n",
        "\t\t\t\tK[2*I+1,2*J]   += Ke[2*i+1,2*j]\n",
        "\t\t\t\tK[2*I+1,2*J+1] += Ke[2*i+1,2*j+1]\n",
        "\t\t\t\tK[2*I,2*J+1]   += Ke[2*i,2*j+1]\n",
        "\t###############################\n",
        "\t# Assign nodal forces and boundary conditions\n",
        "\t#    if N is the number of nodes, then f is 2xN\n",
        "\tf = np.zeros((2*num_nodes))          # initialize to 0 forces\n",
        "\t# How about displacement boundary conditions:\n",
        "\t#    [k11 k12 k13] [u1] = [f1]\n",
        "\t#    [k21 k22 k23] [u2]   [f2]\n",
        "\t#    [k31 k32 k33] [u3]   [f3]\n",
        "\t#\n",
        "\t#    if u3=x then\n",
        "\t#       [k11 k12 k13] [u1] = [f1]\n",
        "\t#       [k21 k22 k23] [u2]   [f2]\n",
        "\t#       [k31 k32 k33] [ x]   [f3]\n",
        "\t#   =>\n",
        "\t#       [k11 k12 k13] [u1] = [f1]\n",
        "\t#       [k21 k22 k23] [u2]   [f2]\n",
        "\t#       [  0   0   1] [u3]   [ x]\n",
        "\t#   the reaction force is\n",
        "\t#       f3 = [k31 k32 k33] * [u1 u2 u3]\n",
        "\tfor i in range(len(boundary)):  # apply all boundary displacements\n",
        "\t\tnn  = boundary[i][0]\n",
        "\t\tdof = boundary[i][1]\n",
        "\t\tval = boundary[i][2]\n",
        "\t\tj = 2*nn\n",
        "\t\tif dof == 2: j = j + 1\n",
        "\t\tK[j,:] = 0.0\n",
        "\t\tK[j,j] = 1.0\n",
        "\t\tf[j] = val\n",
        "\t###############################\n",
        "\tprint('\\n** Solve linear system: Ku = f')\t# [K] = 2N x 2N, [f] = 2N x 1, [u] = 2N x 1\n",
        "\tu = np.linalg.solve(K, f)\n",
        "\t###############################\n",
        "\tprint('\\n** Post process the data')\n",
        "\t# (pre-allocate space for nodal stress and strain)\n",
        "\tnode_strain = []\n",
        "\tnode_stress = []\n",
        "\tfor ni in range(len(nodes)):\n",
        "\t\tnode_strain.append([0.0, 0.0, 0.0])\n",
        "\t\tnode_stress.append([0.0, 0.0, 0.0])\n",
        "\tnode_strain = np.array(node_strain)\n",
        "\tnode_stress = np.array(node_stress)\n",
        "\n",
        "\tprint(f'   min displacements: u1={min(u[0::2]):.4g}, u2={min(u[1::2]):.4g}')\n",
        "\tprint(f'   max displacements: u1={max(u[0::2]):.4g}, u2={max(u[1::2]):.4g}')\n",
        "\temin = np.array([ 9.0e9,  9.0e9,  9.0e9])\n",
        "\temax = np.array([-9.0e9, -9.0e9, -9.0e9])\n",
        "\tsmin = np.array([ 9.0e9,  9.0e9,  9.0e9])\n",
        "\tsmax = np.array([-9.0e9, -9.0e9, -9.0e9])\n",
        "\tfor c in conn:\t# for each element (conn is Nx4)\n",
        "\t\t\t\t\t\t\t\t\t\t# c is like [2,5,22,53]\n",
        "\t\tnodePts = nodes[c,:]\t\t\t# 4x2, eg: [[1.1,0.2], [1.2,0.3], [1.3,0.4], [1.4, 0.5]]\n",
        "\t\tfor q in q4:\t\t\t\t\t# for each integration pt, eg: [-0.7,-0.7]\n",
        "\t\t\tdN = gradshape(q)\t\t\t\t\t# 2x4\n",
        "\t\t\tJ  = np.dot(dN, nodePts).T\t\t\t# 2x2\n",
        "\t\t\tdN = np.dot(np.linalg.inv(J), dN)\t# 2x4\n",
        "\t\t\tB[0,0::2] = dN[0,:]\t\t\t\t\t# 3x8\n",
        "\t\t\tB[1,1::2] = dN[1,:]\n",
        "\t\t\tB[2,0::2] = dN[1,:]\n",
        "\t\t\tB[2,1::2] = dN[0,:]\n",
        "\n",
        "\t\t\tUU = np.zeros((8,1))\t\t\t\t# 8x1\n",
        "\t\t\tUU[0] = u[2*c[0]]\n",
        "\t\t\tUU[1] = u[2*c[0] + 1]\n",
        "\t\t\tUU[2] = u[2*c[1]]\n",
        "\t\t\tUU[3] = u[2*c[1] + 1]\n",
        "\t\t\tUU[4] = u[2*c[2]]\n",
        "\t\t\tUU[5] = u[2*c[2] + 1]\n",
        "\t\t\tUU[6] = u[2*c[3]]\n",
        "\t\t\tUU[7] = u[2*c[3] + 1]\n",
        "\t\t\t# get the strain and stress at the integration point\n",
        "\t\t\tstrain = B @ UU\t\t# (B is 3x8) (UU is 8x1) \t\t=> (strain is 3x1)\n",
        "\t\t\tstress = C @ strain\t# (C is 3x3) (strain is 3x1) \t=> (stress is 3x1)\n",
        "\t\t\temin[0] = min(emin[0], strain[0][0])\n",
        "\t\t\temin[1] = min(emin[1], strain[1][0])\n",
        "\t\t\temin[2] = min(emin[2], strain[2][0])\n",
        "\t\t\temax[0] = max(emax[0], strain[0][0])\n",
        "\t\t\temax[1] = max(emax[1], strain[1][0])\n",
        "\t\t\temax[2] = max(emax[2], strain[2][0])\n",
        "\n",
        "\t\t\tnode_strain[c[0]][:] = strain.T[0]\n",
        "\t\t\tnode_strain[c[1]][:] = strain.T[0]\n",
        "\t\t\tnode_strain[c[2]][:] = strain.T[0]\n",
        "\t\t\tnode_strain[c[3]][:] = strain.T[0]\n",
        "\t\t\tnode_stress[c[0]][:] = stress.T[0]\n",
        "\t\t\tnode_stress[c[1]][:] = stress.T[0]\n",
        "\t\t\tnode_stress[c[2]][:] = stress.T[0]\n",
        "\t\t\tnode_stress[c[3]][:] = stress.T[0]\n",
        "\t\t\tsmax[0] = max(smax[0], stress[0][0])\n",
        "\t\t\tsmax[1] = max(smax[1], stress[1][0])\n",
        "\t\t\tsmax[2] = max(smax[2], stress[2][0])\n",
        "\t\t\tsmin[0] = min(smin[0], stress[0][0])\n",
        "\t\t\tsmin[1] = min(smin[1], stress[1][0])\n",
        "\t\t\tsmin[2] = min(smin[2], stress[2][0])\n",
        "\tprint(f'   min strains: e11={emin[0]:.4g}, e22={emin[1]:.4g}, e12={emin[2]:.4g}')\n",
        "\tprint(f'   max strains: e11={emax[0]:.4g}, e22={emax[1]:.4g}, e12={emax[2]:.4g}')\n",
        "\tprint(f'   min stress:  s11={smin[0]:.4g}, s22={smin[1]:.4g}, s12={smin[2]:.4g}')\n",
        "\tprint(f'   max stress:  s11={smax[0]:.4g}, s22={smax[1]:.4g}, s12={smax[2]:.4g}')\n",
        "\t###############################\n",
        "\tprint('\\n** Plot displacement')\n",
        "\txvec = []\n",
        "\tyvec = []\n",
        "\tres  = []\n",
        "\tplot_type = 'e11'\n",
        "\tfor ni,pt in enumerate(nodes):\n",
        "\t\txvec.append(pt[0] + u[2*ni])\n",
        "\t\tyvec.append(pt[1] + u[2*ni+1])\n",
        "\t\tif plot_type=='u1':  res.append(u[2*ni])\t\t\t\t# x-disp\n",
        "\t\tif plot_type=='u2':  res.append(u[2*ni+1])\t\t\t\t# y-disp\n",
        "\t\tif plot_type=='s11': res.append(node_stress[ni][0])\t\t# s11\n",
        "\t\tif plot_type=='s22': res.append(node_stress[ni][1])\t\t# s22\n",
        "\t\tif plot_type=='s12': res.append(node_stress[ni][2])\t\t# s12\n",
        "\t\tif plot_type=='e11': res.append(node_strain[ni][0])\t\t# e11\n",
        "\t\tif plot_type=='e22': res.append(node_strain[ni][1])\t\t# e22\n",
        "\t\tif plot_type=='e12': res.append(node_strain[ni][2])\t\t# e12\n",
        "\ttri = []\n",
        "\tfor c in conn:\n",
        "\t\ttri.append( [c[0], c[1], c[2]] )\n",
        "\t\ttri.append( [c[0], c[2], c[3]] )\n",
        "\tt = plt.tricontourf(xvec, yvec, res, triangles=tri, levels=14, cmap=plt.cm.jet)\n",
        "\t#plt.scatter(xvec, yvec, marker='o', c='b', s=0.5) # (plot the nodes)\n",
        "\tplt.grid()\n",
        "\tplt.colorbar(t)\n",
        "\tplt.title(plot_type)\n",
        "\tplt.axis('equal')\n",
        "\tplt.show()\n",
        "\tprint('Done.')\n",
        "if __name__ == '__main__':\n",
        "\tmain()\n",
        " #------------------------------------------------------------------------------------------------------------------------------------\n",
        " # CÓDIGOS DO LIVRO GUY SIMPSON - CAPÍTULO 12\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "##\n",
        "\n",
        "##-----------------------------------------ANOTAÇÕES DA REUNIÃO-------------------------------------------------------------------\n",
        "##PROCURAR NO CAP.12 AS SEGUINTES SEÇÕES DOS CÓDIGOS:\n",
        "##\n",
        "##computacional\n",
        "##bound\n",
        "##boundary nodes\n",
        "##-----------------------------------------------------------------------------------------------------------------\n",
        "##% boundary nodes\n",
        "bx0 = find(g_coord(1,:)==0) ;\n",
        "bxn = find(g_coord(1,:)==lx) ;\n",
        "bz0 = find(g_coord(2,:)==0) ;\n",
        "bzn = find(g_coord(2,:)==lz) ;\n",
        "% Fixed boundary equations (vx = dof 1, vz = dof2)\n",
        "% along with their values\n",
        "bcdof = [nf(1,bx0) nf(1,bxn) nf(2,bz0) ] ;\n",
        "bcval = [zeros(1,length(bx0)) -bvel*ones(1,length(bxn)) zeros(1,length(bz0)) ] ;\n",
        "##-----------------------------------------------------------------------------------------------------------------\n",
        "##fixed boundaries\n",
        "##-----------------------------------------------------------------------------------------------------------------\n",
        "##% fixed boundary equations along with their values\n",
        "bcdof = [ nf(1,bx0) nf(1,bxn) nf(2,bz0) ] ;\n",
        "bcval = [ zeros(1,length(bx0)) -bvel*ones(1,length(bxn)) zeros(1,length(bz0)) ] ;\n",
        "##\n",
        "##-----------------------------------------------------------------------------------------------------------------\n",
        "##ploting of results\n",
        "##-------------------------------------------------------------------------\n",
        "##% plotting of results\n",
        "%---------------------------------\n",
        "xgrid = reshape(g_coord(1,:),nz,nx)*length_scale ;% m\n",
        "zgrid = reshape(g_coord(2,:),nz,nx)*length_scale ;% m\n",
        "c = length_scale/time_scale*seconds_per_year*1e3 ;\n",
        "u_solution = reshape(displ(nf(1,:)),nz,nx)*c ;% (mm/yr)\n",
        "v_solution = reshape(displ(nf(2,:)),nz,nx)*c ;% (mm/yr)\n",
        "tensor_scaled = tensor*stress_scale/1e6 ; % MPa\n",
        "figure(1) , clf % mesh\n",
        "plot(xgrid,zgrid,'b')\n",
        "hold on\n",
        "plot(xgrid',zgrid','b')\n",
        "plot(g_coord(1,iit),g_coord(2,iit),'r')\n",
        "plot(g_coord(1,iib),g_coord(2,iib),'r')\n",
        "hold off\n",
        "axis equal\n",
        "title(['Deformed mesh after ',num2str(shortening_percent), ' % shortening'])\n",
        "figure(2) , clf % velocity field\n",
        "quiver(xgrid,zgrid,u_solution,v_solution)\n",
        "axis equal\n",
        "drawnow\n",
        "title('Velocity vector field')\n",
        "figure(3) , clf % x-velocity\n",
        "pcolor(xgrid,zgrid,u_solution)\n",
        "colormap(jet)\n",
        "colorbar\n",
        "shading interp\n",
        "axis equal\n",
        "title('x-velocity (mm/yr)')\n",
        "figure(4) , clf % z-velocity\n",
        "pcolor(xgrid,zgrid,v_solution)\n",
        "colormap(jet)\n",
        "colorbar\n",
        "shading interp\n",
        "axis equal\n",
        "title('z-velocity (mm/yr)')\n",
        "Deformation of Earth’s Crust 205\n",
        "figure(5) , clf % plot negative mean stress\n",
        "for iel=1:nels\n",
        "num = g_num(:,iel) ;\n",
        "coord = g_coord(:,num(1:8))' ;\n",
        "means = (tensor(1,:,iel)+tensor(2,:,iel))/2;\n",
        "nodevalues = fun_s\\means' ;\n",
        "h = fill(coord(:,1),coord(:,2),-nodevalues(1:8)) ;\n",
        "set(h,'linestyle','none')\n",
        "hold on\n",
        "end\n",
        "plot(xgrid(:,1:8:end),zgrid(:,1:8:end),'Color',[0.8,0.8,0.8])\n",
        "plot(xgrid(1:8:end,:)',zgrid(1:8:end,:)','Color',[0.8,0.8,0.8])\n",
        "hold off\n",
        "axis equal\n",
        "colorbar\n",
        "title('Mean stress (MPa)'\n",
        "##---------------------------------------------------------------------------\n",
        "##dogbone -> figura 12.5\n",
        "##phy parameters\n",
        "##----------------------------------------------------------------------------\n",
        "##%---------------------------------------------\n",
        "% Program: deformation_vep2d.m\n",
        "% 2D viscoelastoplastic plane strain deformation\n",
        "% solid mechanics rate formulation\n",
        "% 9-node quadrilaterals\n",
        "%-----------------------------------------\n",
        "clear\n",
        "seconds_per_year = 60*60*24*365 ;\n",
        "% physical parameters\n",
        "lx = 4 ; % length of x domain (m)\n",
        "lz = 1 ; % length of z domain (m)\n",
        "emod_v = [1 1 1 1 ]*1e11 ; % Young's modulus (Pa)\n",
        "pois_v = [0.3 0.3 0.3 0.3 ] ; % Poisson's ratio\n",
        "smod_v = emod_v./(2*(1+pois_v)) ; % shear modulus (Pa)\n",
        "bmod_v = emod_v./(3*(1-2*pois_v)) ; % bulk modulus (Pa)\n",
        "visc_v = [ 1 1 100 100]*1e18 ; % shear viscosity (Pas)\n",
        "coh_v = 20*[1 1 1 0.9 ]*1e6 ; % cohesion (Pa)\n",
        "phi_v = ([1 1 1 1])*30*pi/180 ; % friction angle(radians)\n",
        "psi_v = [0 0 0 0] ; % dilation angle (radians)\n",
        "grav_v = [ 2700 2700 2700 2700 ]*9.8 ; % density*gravity\n",
        "bvel = 5e-3/seconds_per_year ; % boundary velocity (m/s)\n",
        "edot = bvel/lx ; % initial strain rate (1/s)\n",
        "plasticity= logical(0) ; % include/ignore plasticity (true/false)\n",
        "nst = 3 ; % number of stress/strain components\n",
        "##\n",
        "##\n",
        "##\n",
        "##----------------------------------------------------------------------------\n",
        "##"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Q2eEGj1BmYee"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}